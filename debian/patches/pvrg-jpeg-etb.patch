Description: Add support for PGM output.
 Remove jpeg.1 patch, see jpeg.1.patch instead
 This web page and the etb patch to the PVRG JPEG code is by Eli the Bearded / Benjamin Elijah Griffin.
 Reproduction of code is permitted under the Creative Commons Attribution-ShareAlike License.
Author: Eli the Bearded / Benjamin Elijah Griffin <eli@panix.com>
Origin: other, http://www.panix.com/~eli/jpeg/
Forwarded: not-needed
Reviewed-By: Mathieu Malaterre <malat@debian.org>
Last-Update: 2013-10-08

Index: pvrg-jpeg-1.2.1+dfsg1/globals.h
===================================================================
--- pvrg-jpeg-1.2.1+dfsg1.orig/globals.h	2013-10-08 16:36:17.000000000 +0200
+++ pvrg-jpeg-1.2.1+dfsg1/globals.h	2013-10-08 16:36:24.000000000 +0200
@@ -129,6 +129,8 @@
 DHUFF *DCDhuff[MAXIMUM_DEVICES]; /* Decoder huffman tables */
 EHUFF *DCEhuff[MAXIMUM_DEVICES]; /* Encoder huffman tables */
 XHUFF *DCXhuff[MAXIMUM_DEVICES]; /* Transmittable huffman tables */
+char *OutBaseName;               /* Base file name of output streams */
+int  OutPGM;                     /* Put a PGM header on output streams */
 };
 
 FRAME {
Index: pvrg-jpeg-1.2.1+dfsg1/io.c
===================================================================
--- pvrg-jpeg-1.2.1+dfsg1.orig/io.c	2013-10-08 16:36:20.000000000 +0200
+++ pvrg-jpeg-1.2.1+dfsg1/io.c	2013-10-08 16:36:24.000000000 +0200
@@ -38,6 +38,7 @@
 #endif
 #include <sys/stat.h>
 
+#include <errno.h>
 
 /* Functions which are local and which are exported. */
 
@@ -64,6 +65,7 @@
 extern void MakeIob();
 extern void PrintIob();
 extern void InstallIob();
+extern void InstallHeaderIob();
 extern void TerminateFile();
 
 extern void ReadLine();
@@ -166,10 +168,12 @@
      int wsize;
 {
   BEGIN("MakeIob");
-  int index,sofs;
+  int index,sofs,hsize;
+  char header[128];
   BUFFER **current;
   IOBUF *temp;
 
+  
   for(index=0;index<CScan->NumberComponents;index++) /* Make IOBUF */
     {                                                /* For each component */
       if (!(temp = MakeStructure(IOBUF)))
@@ -183,6 +187,7 @@
       temp->wsize = wsize;
       temp->hpos=0;
       temp->vpos=0;
+      temp->hsize=0;
       temp->width = CFrame->Width[CScan->ci[index]];  /* Set up widthxheight */
       temp->height = CFrame->Height[CScan->ci[index]];
       if (CScan->NumberComponents==1)
@@ -216,6 +221,10 @@
 	  printf("Cannot allocate Iob bufferlist.\n");
 	  exit(ERROR_MEMORY);
 	}
+      if(Loud > MUTE) {
+	printf("About to open %s from io.c:MakeIob\n",
+		CFrame->ComponentFileName[CScan->ci[index]]);
+      }
       if ((temp->file =                               /* Open file */
 	   open(CFrame->ComponentFileName[CScan->ci[index]],
 		flags,UMASK)) < 0)
@@ -224,7 +233,12 @@
 	  printf("Cannot open file %s.\n",
 		 CFrame->ComponentFileName[CScan->ci[index]]);
 	  exit(ERROR_INIT_FILE);
-	}               /* Make buffer for every line of component in MDU */
+	}
+
+      temp->hsize = snprintf(temp->header,128,
+	  		"P5\n%d %d\n255\n",temp->width,temp->height);
+
+	                /* Make buffer for every line of component in MDU */
       for(sofs=0,current=temp->blist;current<temp->blist+temp->num;current++)
 	{
 	  *current = MakeXBuffer(CFrame->BufferSize, wsize);
@@ -1148,6 +1162,67 @@
     }
 }
 
+/*BFUNC
+
+InstallHeaderIob() puts a pgm raw header on a file. Use just before closing.
 
+EFUNC*/
+
+void InstallHeaderIob()
+{
+  BEGIN("InstallHeaderIob");
+  size_t rsize,tsize,wsize,lsize;
+  char *timage;
+
+  if((Iob->hsize == 0) || (Iob->header == NULL)) {
+    return;
+  }
+  tsize = lseek(Iob->file,0,2);
+  if(tsize < 1) {
+    return;
+  }
+
+  timage = (char*) malloc(tsize);
+  if(timage == NULL) {
+    WHEREAMI();
+    printf("Malloc failure in InstallHeaderIob\n");
+    exit(1); 
+  }
+
+  lsize = lseek(Iob->file,0,0); /* rewind */
+  if(lsize != 0) {
+    WHEREAMI();
+    printf("lseek failure in InstallHeaderIob\n");
+    exit(1); 
+  }
+  rsize = read(Iob->file, timage, tsize);
+  if(rsize != tsize) {
+    WHEREAMI();
+    printf("Read failure in InstallHeaderIob (r %d != t %d, fd %d)\n", rsize, tsize, Iob->file);
+    perror("Error:");
+    exit(1); 
+  }
+
+  lsize = lseek(Iob->file,0,0); /* rewind */
+  if(lsize != 0) {
+    WHEREAMI();
+    printf("lseek failure in InstallHeaderIob\n");
+    exit(1); 
+  }
+  wsize = write(Iob->file, Iob->header, Iob->hsize);
+  if(wsize != Iob->hsize) {
+    WHEREAMI();
+    printf("Write failure in InstallHeaderIob\n");
+    exit(1); 
+  }
+  wsize = write(Iob->file, timage, tsize);
+  if(wsize != tsize) {
+    WHEREAMI();
+    printf("Write failure in InstallHeaderIob\n");
+    exit(1); 
+  }
+  free(timage);
+
+}
 
 /*END*/
Index: pvrg-jpeg-1.2.1+dfsg1/jpeg.c
===================================================================
--- pvrg-jpeg-1.2.1+dfsg1.orig/jpeg.c	2013-10-08 16:36:20.000000000 +0200
+++ pvrg-jpeg-1.2.1+dfsg1/jpeg.c	2013-10-08 16:36:24.000000000 +0200
@@ -217,7 +217,13 @@
 	    case 'n':                    /* Set non-interleaved mode */
 	      ScanComponentThreshold=1;
 	      break;
-	    case 'o':                    /* -o Oracle mode (input parsing)*/
+	    case 'g':                    /* use PGM header on outfiles */
+	      CImage->OutPGM = 1;
+	      break;
+	    case 'o':                    /* -o outfile */
+	      CImage->OutBaseName = argv[++i];
+	      break;
+	    case 'O':                    /* -o Oracle mode (input parsing)*/
 	      Oracle=1;
 	      break;
 	    case 'p':
@@ -1301,7 +1307,7 @@
 	    {
 	      if (Notify)             /* Print statistics */
 		{
-		  printf("> GW:%d  GH:%d  R:%d\n",
+		  printf("> GlobalWidth:%d  GlobalHeight:%d  ResyncInverval:%d\n",
 			 CFrame->GlobalWidth,
 			 CFrame->GlobalHeight,
 			 CFrame->ResyncInterval);
@@ -1310,7 +1316,7 @@
 		{
 		  if (Notify)
 		    {
-		      printf(">> C:%d  N:%s  W:%d  H:%d  hf:%d  vf:%d\n",
+		      printf(">> C:%2d  N: %s  W:%6d  H:%6d  hf:%d  vf:%d\n",
 			     CScan->ci[i],
 			     CFrame->ComponentFileName[CScan->ci[i]],
 			     CFrame->Width[CScan->ci[i]],
@@ -1321,6 +1327,10 @@
 		  InstallIob(i);
 		  FlushIob();                        /* Close image files */
 		  SeekEndIob();
+		  if (CImage->OutPGM)
+		    {
+		      InstallHeaderIob();
+		    } 
 		  CloseIob();
 		}
 	      CurrentMDU=0;
@@ -1868,6 +1878,8 @@
   CImage->QuantizationMatrices[1] = ChrominanceQuantization;
   CImage->NumberACTables = 0;       /* No tables defined yet */
   CImage->NumberDCTables = 0;
+  CImage->OutBaseName = NULL;
+  CImage->OutPGM = 0;
 }
 
 /*BFUNC
@@ -1993,22 +2005,37 @@
 {
   BEGIN("MakeConsistentFileNames");
   int i;
+  char ext[8];
+
+  if(CImage->OutBaseName == NULL)
+    { /* No base name specified, just use stream. */
+      CImage->OutBaseName = CImage->StreamFileName;
+    }
+
+  if(CImage->OutPGM)
+    { /* PGM header request, let's set the extension. */
+      sprintf(ext,".pgm");
+    }
+  else
+   { /* empty string */
+     *ext = 0;
+   }
 
   for(i=0;i<CScan->NumberComponents;i++)
     {
       if (CImage->ImageSequence)  /* If in sequence, must add sequence */
 	{                         /* identifier */
 	  CFrame->ComponentFileName[CScan->ci[i]] = 
-	    (char *) calloc(strlen(CImage->StreamFileName)+16,sizeof(char));
-	  sprintf(CFrame->ComponentFileName[CScan->ci[i]],"%s.%d.%d",
-		  CImage->StreamFileName,CImage->ImageSequence,CScan->ci[i]);
+	    (char *) calloc(strlen(CImage->StreamFileName)+20,sizeof(char));
+	  sprintf(CFrame->ComponentFileName[CScan->ci[i]],"%s.%d.%d%s",
+		  CImage->OutBaseName,CImage->ImageSequence,CScan->ci[i], ext);
 	}
       else if (CFrame->ComponentFileName[CScan->ci[i]] == NULL)
 	{                        /* Otherwise if none specified, create. */
 	  CFrame->ComponentFileName[CScan->ci[i]] = 
-	    (char *) calloc(strlen(CImage->StreamFileName)+8,sizeof(char));
-	  sprintf(CFrame->ComponentFileName[CScan->ci[i]],"%s.%d",
-		  CImage->StreamFileName,CScan->ci[i]);
+	    (char *) calloc(strlen(CImage->StreamFileName)+12,sizeof(char));
+	  sprintf(CFrame->ComponentFileName[CScan->ci[i]],"%s.%d%s",
+		  CImage->OutBaseName,CScan->ci[i], ext);
 	}
     }
 }
@@ -2194,9 +2221,9 @@
   BEGIN("Help");
 
   printf("jpeg -iw ImageWidth -ih ImageHeight [-JFIF] [-q(l) Q-Factor]\n");
-  printf("     [-a] [-b] [-d] [-k predictortype] [-n] [-o] [-y] [-z]\n");
+  printf("     [-a] [-b] [-d] [-k predictortype] [-n] [-O] [-y] [-z] [-g]\n");
   printf("     [-p PrecisionValue] [-t pointtransform]\n");
-  printf("     [-r ResyncInterval] [-s StreamName]\n");
+  printf("     [-r ResyncInterval] [-s StreamName] [-o OutBaseName]\n");
   printf("     [[-ci ComponentIndex1] [-fw FrameWidth1] [-fh FrameHeight1]\n");
   printf("      [-hf HorizontalFrequency1] [-vf VerticalFrequency1]\n");
   printf("      ComponentFile1]\n");
@@ -2208,11 +2235,13 @@
   printf("-a enables Reference DCT.\n");
   printf("-b enables Lee DCT.\n");
   printf("-d decoder enable.\n");
+  printf("-g put PGM headers on decode output files.\n");
   printf("-[k predictortype] enables lossless mode.\n");
   printf("-q specifies quantization factor; -ql specifies can be long.\n");
   printf("-n enables non-interleaved mode.\n");
   printf("-[t pointtransform] is the number of bits for the PT shift.\n");
-  printf("-o enables the Command Interpreter.\n");
+  printf("-o set a base name for decode output files.\n");
+  printf("-O enables the Command Interpreter.\n");
   printf("-p specifies precision.\n");
   printf("-y run in robust mode against errors (cannot be used with DNL).\n");
   printf("-z uses default Huffman tables.\n");
Index: pvrg-jpeg-1.2.1+dfsg1/prototypes.h
===================================================================
--- pvrg-jpeg-1.2.1+dfsg1.orig/prototypes.h	2013-10-08 16:36:20.000000000 +0200
+++ pvrg-jpeg-1.2.1+dfsg1/prototypes.h	2013-10-08 16:36:24.000000000 +0200
@@ -106,6 +106,7 @@
 extern int NumberBlocksIob();
 extern int NumberBlockMDUIob();
 extern void InstallIob();
+extern void InstallHeaderIob();
 extern void TerminateFile();
 
 extern int NumberLineMDUIob();
Index: pvrg-jpeg-1.2.1+dfsg1/system.h
===================================================================
--- pvrg-jpeg-1.2.1+dfsg1.orig/system.h	2013-10-08 16:36:17.000000000 +0200
+++ pvrg-jpeg-1.2.1+dfsg1/system.h	2013-10-08 16:36:24.000000000 +0200
@@ -68,6 +68,8 @@
 int file;                     /* File descriptor */
 int flags;                    /* File mode flags */
 int linelastdefault;          /* Last line element default */
+int hsize;                    /* Header size */
+char header[128];             /* Header textfield */
 BUFFER **blist;               /* A list of buffers */
 };
 
